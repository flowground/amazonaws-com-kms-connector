{
    "title": "AWS Key Management Service",
    "description": "AWS Key Management Service AWS Key Management Service (AWS KMS) is an encryption\nand key management web service. This guide describes the AWS KMS operations that\nyou can call programmatically. For general information about AWS KMS, see the \nAWS Key Management Service Developer Guide\n[http://docs.aws.amazon.com/kms/latest/developerguide/].\n\nAWS provides SDKs that consist of libraries and sample code for various\nprogramming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.).\nThe SDKs provide a convenient way to create programmatic access to AWS KMS and\nother AWS services. For example, the SDKs take care of tasks such as signing\nrequests (see below), managing errors, and retrying requests automatically. For\nmore information about the AWS SDKs, including how to download and install them,\nsee Tools for Amazon Web Services [http://aws.amazon.com/tools/].\n\nWe recommend that you use the AWS SDKs to make programmatic API calls to AWS\nKMS.\n\nClients must support TLS (Transport Layer Security) 1.0. We recommend TLS 1.2.\nClients must also support cipher suites with Perfect Forward Secrecy (PFS) such\nas Ephemeral Diffie-Hellman (DHE) or Elliptic Curve Ephemeral Diffie-Hellman\n(ECDHE). Most modern systems such as Java 7 and later support these modes.\n\n Signing Requests \n\nRequests must be signed by using an access key ID and a secret access key. We\nstrongly recommend that you do not use your AWS account (root) access key ID and\nsecret key for everyday work with AWS KMS. Instead, use the access key ID and\nsecret access key for an IAM user, or you can use the AWS Security Token Service\nto generate temporary security credentials that you can use to sign requests.\n\nAll AWS KMS operations require Signature Version 4\n[http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html].\n\n Logging API Requests \n\nAWS KMS supports AWS CloudTrail, a service that logs AWS API calls and related\nevents for your AWS account and delivers them to an Amazon S3 bucket that you\nspecify. By using the information collected by CloudTrail, you can determine\nwhat requests were made to AWS KMS, who made the request, when it was made, and\nso on. To learn more about CloudTrail, including how to turn it on and find your\nlog files, see the AWS CloudTrail User Guide\n[http://docs.aws.amazon.com/awscloudtrail/latest/userguide/].\n\n Additional Resources \n\nFor more information about credentials and request signing, see the following:\n\n *   AWS Security Credentials\n   [http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html] \n   - This topic provides general information about the of credentials used for\n   accessing AWS.\n   \n   \n *   Temporary Security Credentials\n   [http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html] -\n   This section of the IAM User Guide describes how to create and use temporary\n   security credentials.\n   \n   \n *   Signature Version 4 Signing Process\n   [http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html] -\n   This set of topics walks you through the process of signing a request using\n   an access key ID and a secret access key.\n   \n   \n\n Commonly Used APIs \n\nOf the APIs discussed in this guide, the following will prove the most useful\nfor most applications. You will likely perform actions other than these, such as\ncreating keys and assigning policies, by using the console.\n\n *   Encrypt \n   \n   \n *   Decrypt \n   \n   \n *   GenerateDataKey \n   \n   \n *   GenerateDataKeyWithoutPlaintext",
    "docsUrl": "https://docs.aws.amazon.com/kms/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/kms/2014-11-01/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://kms.amazonaws.com/",
                    "http://kms.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "CancelKeyDeletion": {
            "main": "./lib/actions/CancelKeyDeletion.js",
            "title": "CancelKeyDeletion",
            "description": "Cancels the deletion of a customer master key (CMK). When this operation is\nsuccessful, the CMK is set to the Disabled state. To enable a CMK, use EnableKey\n. You cannot perform this operation on a CMK in a different AWS account.\n\nFor more information about scheduling and canceling deletion of a CMK, see \nDeleting Customer Master Keys\n[http://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html] in the \nAWS Key Management Service Developer Guide.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CancelKeyDeletion.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ConnectCustomKeyStore": {
            "main": "./lib/actions/ConnectCustomKeyStore.js",
            "title": "ConnectCustomKeyStore",
            "description": "Connects or reconnects a custom key store\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html] \nto its associated AWS CloudHSM cluster.\n\nThe custom key store must be connected before you can create customer master\nkeys (CMKs) in the key store or use the CMKs it contains. You can disconnect and\nreconnect a custom key store at any time.\n\nTo connect a custom key store, its associated AWS CloudHSM cluster must have at\nleast one active HSM. To get the number of active HSMs in a cluster, use the \nDescribeClusters\n[http://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters] \noperation. To add HSMs to the cluster, use the CreateHsm\n[http://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_CreateHsm] \noperation.\n\nThe connection process can take an extended amount of time to complete; up to 20\nminutes. This operation starts the connection process, but it does not wait for\nit to complete. When it succeeds, this operation quickly returns an HTTP 200\nresponse and a JSON object with no properties. However, this response does not\nindicate that the custom key store is connected. To get the connection state of\nthe custom key store, use the DescribeCustomKeyStores operation.\n\nDuring the connection process, AWS KMS finds the AWS CloudHSM cluster that is\nassociated with the custom key store, creates the connection infrastructure,\nconnects to the cluster, logs into the AWS CloudHSM client as the kmsuser crypto\nuser\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser] \n(CU), and rotates its password.\n\nThe ConnectCustomKeyStore operation might fail for various reasons. To find the\nreason, use the DescribeCustomKeyStores operation and see the \nConnectionErrorCode in the response. For help interpreting the \nConnectionErrorCode, see CustomKeyStoresListEntry.\n\nTo fix the failure, use the DisconnectCustomKeyStore operation to disconnect the\ncustom key store, correct the error, use the UpdateCustomKeyStore operation if\nnecessary, and then use ConnectCustomKeyStore again.\n\nIf you are having trouble connecting or disconnecting a custom key store, see \nTroubleshooting a Custom Key Store\n[http://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html] in the \nAWS Key Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ConnectCustomKeyStore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateAlias": {
            "main": "./lib/actions/CreateAlias.js",
            "title": "CreateAlias",
            "description": "Creates a display name for a customer master key (CMK). You can use an alias to\nidentify a CMK in selected operations, such as Encrypt and GenerateDataKey. \n\nEach CMK can have multiple aliases, but each alias points to only one CMK. The\nalias name must be unique in the AWS account and region. To simplify code that\nruns in multiple regions, use the same alias name, but point it to a different\nCMK in each region. \n\nBecause an alias is not a property of a CMK, you can delete and change the\naliases of a CMK without affecting the CMK. Also, aliases do not appear in the\nresponse from the DescribeKey operation. To get the aliases of all CMKs, use the \nListAliases operation.\n\nAn alias must start with the word alias followed by a forward slash (alias/).\nThe alias name can contain only alphanumeric characters, forward slashes (/),\nunderscores (_), and dashes (-). Alias names cannot begin with aws; that alias\nname prefix is reserved by Amazon Web Services (AWS).\n\nThe alias and the CMK it is mapped to must be in the same AWS account and the\nsame region. You cannot perform this operation on an alias in a different AWS\naccount.\n\nTo map an existing alias to a different CMK, call UpdateAlias.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateCustomKeyStore": {
            "main": "./lib/actions/CreateCustomKeyStore.js",
            "title": "CreateCustomKeyStore",
            "description": "Creates a custom key store\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html] \nthat is associated with an AWS CloudHSM cluster\n[http://docs.aws.amazon.com/cloudhsm/latest/userguide/clusters.html] that you\nown and manage.\n\nThis operation is part of the Custom Key Store feature\n[http://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html] \nfeature in AWS KMS, which combines the convenience and extensive integration of\nAWS KMS with the isolation and control of a single-tenant key store.\n\nWhen the operation completes successfully, it returns the ID of the new custom\nkey store. Before you can use your new custom key store, you need to use the \nConnectCustomKeyStore operation to connect the new key store to its AWS CloudHSM\ncluster.\n\nThe CreateCustomKeyStore operation requires the following elements.\n\n *  You must specify an active AWS CloudHSM cluster in the same account and AWS\n   Region as the custom key store. You can use an existing cluster or create and\n   activate a new AWS CloudHSM cluster\n   [http://docs.aws.amazon.com/cloudhsm/latest/userguide/create-cluster.html] \n   for the key store. AWS KMS does not require exclusive use of the cluster.\n   \n   \n *  You must include the content of the trust anchor certificate for the cluster.\n   You created this certificate, and saved it in the customerCA.crt file, when\n   you initialized the cluster\n   [http://docs.aws.amazon.com/cloudhsm/latest/userguide/initialize-cluster.html#sign-csr]\n   .\n   \n   \n *  You must provide the password of the dedicated kmsuser crypto user\n   [http://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser] \n   (CU) account in the cluster.\n   \n   Before you create the custom key store, use the createUser\n   [http://docs.aws.amazon.com/cloudhsm/latest/userguide/cloudhsm_mgmt_util-createUser.html] \n   command in cloudhsm_mgmt_util to create a crypto user (CU) named kmsuser\n   [http://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser]\n   in specified AWS CloudHSM cluster. AWS KMS uses the kmsuser CU account to\n   create and manage key material on your behalf. For instructions, see Create\n   the kmsuser Crypto User\n   [http://docs.aws.amazon.com/kms/latest/developerguide/create-keystore.html#before-keystore] \n   in the AWS Key Management Service Developer Guide.\n   \n   \n\nThe AWS CloudHSM cluster that you specify must meet the following requirements.\n\n *  The cluster must be active and be in the same AWS account and Region as the\n   custom key store.\n   \n   \n *  Each custom key store must be associated with a different AWS CloudHSM\n   cluster. The cluster cannot be associated with another custom key store or\n   have the same cluster certificate as a cluster that is associated with\n   another custom key store. To view the cluster certificate, use the AWS\n   CloudHSM DescribeClusters\n   [http://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html] \n   operation. Clusters that share a backup history have the same cluster\n   certificate.\n   \n   \n *  The cluster must be configured with subnets in at least two different\n   Availability Zones in the Region. Because AWS CloudHSM is not supported in\n   all Availability Zones, we recommend that the cluster have subnets in all\n   Availability Zones in the Region.\n   \n   \n *  The cluster must contain at least two active HSMs, each in a different\n   Availability Zone.\n   \n   \n\nNew custom key stores are not automatically connected. After you create your\ncustom key store, use the ConnectCustomKeyStore operation to connect the custom\nkey store to its associated AWS CloudHSM cluster. Even if you are not going to\nuse your custom key store immediately, you might want to connect it to verify\nthat all settings are correct and then disconnect it until you are ready to use\nit.\n\nIf this operation succeeds, it returns the ID of the new custom key store. For\nhelp with failures, see Troubleshoot a Custom Key Store\n[http://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html] in the \nAWS KMS Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateCustomKeyStore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateGrant": {
            "main": "./lib/actions/CreateGrant.js",
            "title": "CreateGrant",
            "description": "Adds a grant to a customer master key (CMK). The grant specifies who can use the\nCMK and under what conditions. When setting permissions, grants are an\nalternative to key policies. \n\nTo perform this operation on a CMK in a different AWS account, specify the key\nARN in the value of the KeyId parameter. For more information about grants, see \nGrants [http://docs.aws.amazon.com/kms/latest/developerguide/grants.html] in the \nAWS Key Management Service Developer Guide.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateGrant.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateKey": {
            "main": "./lib/actions/CreateKey.js",
            "title": "CreateKey",
            "description": "Creates a customer master key (CMK) in the caller's AWS account.\n\nYou can use a CMK to encrypt small amounts of data (4 KiB or less) directly, but\nCMKs are more commonly used to encrypt data keys, which are used to encrypt raw\ndata. For more information about data keys and the difference between CMKs and\ndata keys, see the following:\n\n *  The GenerateDataKey operation\n   \n   \n *   AWS Key Management Service Concepts\n   [http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html] in the \n   AWS Key Management Service Developer Guide \n   \n   \n\nIf you plan to import key material\n[http://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html], use\nthe Origin parameter with a value of EXTERNAL to create a CMK with no key\nmaterial.\n\nTo create a CMK in a custom key store\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html],\nuse CustomKeyStoreId parameter to specify the custom key store. You must also\nuse the Origin parameter with a value of AWS_CLOUDHSM. The AWS CloudHSM cluster\nthat is associated with the custom key store must have at least two active HSMs,\neach in a different Availability Zone in the Region.\n\nYou cannot use this operation to create a CMK in a different AWS account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Decrypt": {
            "main": "./lib/actions/Decrypt.js",
            "title": "Decrypt",
            "description": "Decrypts ciphertext. Ciphertext is plaintext that has been previously encrypted\nby using any of the following operations:\n\n *   GenerateDataKey \n   \n   \n *   GenerateDataKeyWithoutPlaintext \n   \n   \n *   Encrypt \n   \n   \n\nNote that if a caller has been granted access permissions to all keys (through,\nfor example, IAM user policies that grant Decrypt permission on all resources),\nthen ciphertext encrypted by using keys in other accounts where the key grants\naccess to the caller can be decrypted. To remedy this, we recommend that you do\nnot grant Decrypt access in an IAM user policy. Instead grant Decrypt access\nonly in key policies. If you must grant Decrypt access in an IAM user policy,\nyou should scope the resource to specific keys or to specific trusted accounts.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Decrypt.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteAlias": {
            "main": "./lib/actions/DeleteAlias.js",
            "title": "DeleteAlias",
            "description": "Deletes the specified alias. You cannot perform this operation on an alias in a\ndifferent AWS account. \n\nBecause an alias is not a property of a CMK, you can delete and change the\naliases of a CMK without affecting the CMK. Also, aliases do not appear in the\nresponse from the DescribeKey operation. To get the aliases of all CMKs, use the \nListAliases operation. \n\nEach CMK can have multiple aliases. To change the alias of a CMK, use \nDeleteAlias to delete the current alias and CreateAlias to create a new alias.\nTo associate an existing alias with a different customer master key (CMK), call \nUpdateAlias.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteCustomKeyStore": {
            "main": "./lib/actions/DeleteCustomKeyStore.js",
            "title": "DeleteCustomKeyStore",
            "description": "Deletes a custom key store\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html].\nThis operation does not delete the AWS CloudHSM cluster that is associated with\nthe custom key store, or affect any users or keys in the cluster.\n\nThe custom key store that you delete cannot contain any AWS KMS customer master\nkeys (CMKs)\n[http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys]\n. Before deleting the key store, verify that you will never need to use any of\nthe CMKs in the key store for any cryptographic operations. Then, use \nScheduleKeyDeletion to delete the AWS KMS customer master keys (CMKs) from the\nkey store. When the scheduled waiting period expires, the ScheduleKeyDeletion \noperation deletes the CMKs. Then it makes a best effort to delete the key\nmaterial from the associated cluster. However, you might need to manually delete\nthe orphaned key material\n[http://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key] \nfrom the cluster and its backups.\n\nAfter all CMKs are deleted from AWS KMS, use DisconnectCustomKeyStore to\ndisconnect the key store from AWS KMS. Then, you can delete the custom key\nstore.\n\nInstead of deleting the custom key store, consider using \nDisconnectCustomKeyStore to disconnect it from AWS KMS. While the key store is\ndisconnected, you cannot create or use the CMKs in the key store. But, you do\nnot need to delete CMKs and you can reconnect a disconnected custom key store at\nany time.\n\nIf the operation succeeds, it returns a JSON object with no properties.\n\nThis operation is part of the Custom Key Store feature\n[http://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html] \nfeature in AWS KMS, which combines the convenience and extensive integration of\nAWS KMS with the isolation and control of a single-tenant key store.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteCustomKeyStore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteImportedKeyMaterial": {
            "main": "./lib/actions/DeleteImportedKeyMaterial.js",
            "title": "DeleteImportedKeyMaterial",
            "description": "Deletes key material that you previously imported. This operation makes the\nspecified customer master key (CMK) unusable. For more information about\nimporting key material into AWS KMS, see Importing Key Material\n[http://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html] in\nthe AWS Key Management Service Developer Guide. You cannot perform this\noperation on a CMK in a different AWS account.\n\nWhen the specified CMK is in the PendingDeletion state, this operation does not\nchange the CMK's state. Otherwise, it changes the CMK's state to PendingImport.\n\nAfter you delete key material, you can use ImportKeyMaterial to reimport the\nsame key material into the CMK.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteImportedKeyMaterial.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeCustomKeyStores": {
            "main": "./lib/actions/DescribeCustomKeyStores.js",
            "title": "DescribeCustomKeyStores",
            "description": "Gets information about custom key stores\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html] \nin the account and region.\n\nThis operation is part of the Custom Key Store feature\n[http://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html] \nfeature in AWS KMS, which combines the convenience and extensive integration of\nAWS KMS with the isolation and control of a single-tenant key store.\n\nBy default, this operation returns information about all custom key stores in\nthe account and region. To get only information about a particular custom key\nstore, use either the CustomKeyStoreName or CustomKeyStoreId parameter (but not\nboth).\n\nTo determine whether the custom key store is connected to its AWS CloudHSM\ncluster, use the ConnectionState element in the response. If an attempt to\nconnect the custom key store failed, the ConnectionState value is FAILED and the \nConnectionErrorCode element in the response indicates the cause of the failure.\nFor help interpreting the ConnectionErrorCode, see CustomKeyStoresListEntry.\n\nCustom key stores have a DISCONNECTED connection state if the key store has\nnever been connected or you use the DisconnectCustomKeyStore operation to\ndisconnect it. If your custom key store state is CONNECTED but you are having\ntrouble using it, make sure that its associated AWS CloudHSM cluster is active\nand contains the minimum number of HSMs required for the operation, if any.\n\n For help repairing your custom key store, see the Troubleshooting Custom Key\nStores [http://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore-html] \ntopic in the AWS Key Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeCustomKeyStores.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeKey": {
            "main": "./lib/actions/DescribeKey.js",
            "title": "DescribeKey",
            "description": "Provides detailed information about the specified customer master key (CMK).\n\nIf you use DescribeKey on a predefined AWS alias, that is, an AWS alias with no\nkey ID, AWS KMS associates the alias with an AWS managed CMK\n[http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys] \nand returns its KeyId and Arn in the response.\n\nTo perform this operation on a CMK in a different AWS account, specify the key\nARN or alias ARN in the value of the KeyId parameter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisableKey": {
            "main": "./lib/actions/DisableKey.js",
            "title": "DisableKey",
            "description": "Sets the state of a customer master key (CMK) to disabled, thereby preventing\nits use for cryptographic operations. You cannot perform this operation on a CMK\nin a different AWS account.\n\nFor more information about how key state affects the use of a CMK, see How Key\nState Affects the Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisableKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisableKeyRotation": {
            "main": "./lib/actions/DisableKeyRotation.js",
            "title": "DisableKeyRotation",
            "description": "Disables automatic rotation of the key material\n[http://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html] for the\nspecified customer master key (CMK). You cannot perform this operation on a CMK\nin a different AWS account.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisableKeyRotation.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DisconnectCustomKeyStore": {
            "main": "./lib/actions/DisconnectCustomKeyStore.js",
            "title": "DisconnectCustomKeyStore",
            "description": "Disconnects the custom key store\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html] \nfrom its associated AWS CloudHSM cluster. While a custom key store is\ndisconnected, you can manage the custom key store and its customer master keys\n(CMKs), but you cannot create or use CMKs in the custom key store. You can\nreconnect the custom key store at any time.\n\nWhile a custom key store is disconnected, all attempts to create customer master\nkeys (CMKs) in the custom key store or to use existing CMKs in cryptographic\noperations will fail. This action can prevent users from storing and accessing\nsensitive data.\n\n \n\nTo find the connection state of a custom key store, use the \nDescribeCustomKeyStores operation. To reconnect a custom key store, use the \nConnectCustomKeyStore operation.\n\nIf the operation succeeds, it returns a JSON object with no properties.\n\nThis operation is part of the Custom Key Store feature\n[http://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html] \nfeature in AWS KMS, which combines the convenience and extensive integration of\nAWS KMS with the isolation and control of a single-tenant key store.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DisconnectCustomKeyStore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "EnableKey": {
            "main": "./lib/actions/EnableKey.js",
            "title": "EnableKey",
            "description": "Sets the key state of a customer master key (CMK) to enabled. This allows you to\nuse the CMK for cryptographic operations. You cannot perform this operation on a\nCMK in a different AWS account.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/EnableKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "EnableKeyRotation": {
            "main": "./lib/actions/EnableKeyRotation.js",
            "title": "EnableKeyRotation",
            "description": "Enables automatic rotation of the key material\n[http://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html] for the\nspecified customer master key (CMK). You cannot perform this operation on a CMK\nin a different AWS account.\n\nYou cannot enable automatic rotation of CMKs with imported key material or CMKs\nin a custom key store\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html].\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/EnableKeyRotation.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Encrypt": {
            "main": "./lib/actions/Encrypt.js",
            "title": "Encrypt",
            "description": "Encrypts plaintext into ciphertext by using a customer master key (CMK). The \nEncrypt operation has two primary use cases:\n\n *  You can encrypt up to 4 kilobytes (4096 bytes) of arbitrary data such as an\n   RSA key, a database password, or other sensitive information.\n   \n   \n *  To move encrypted data from one AWS region to another, you can use this\n   operation to encrypt in the new region the plaintext data key that was used\n   to encrypt the data in the original region. This provides you with an\n   encrypted copy of the data key that can be decrypted in the new region and\n   used there to decrypt the encrypted data.\n   \n   \n\nTo perform this operation on a CMK in a different AWS account, specify the key\nARN or alias ARN in the value of the KeyId parameter.\n\nUnless you are moving encrypted data from one region to another, you don't use\nthis operation to encrypt a generated data key within a region. To get data keys\nthat are already encrypted, call the GenerateDataKey or \nGenerateDataKeyWithoutPlaintext operation. Data keys don't need to be encrypted\nagain by calling Encrypt.\n\nTo encrypt data locally in your application, use the GenerateDataKey operation\nto return a plaintext data encryption key and a copy of the key encrypted under\nthe CMK of your choosing.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Encrypt.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GenerateDataKey": {
            "main": "./lib/actions/GenerateDataKey.js",
            "title": "GenerateDataKey",
            "description": "Returns a data encryption key that you can use in your application to encrypt\ndata locally. \n\nYou must specify the customer master key (CMK) under which to generate the data\nkey. You must also specify the length of the data key using either the KeySpec \nor NumberOfBytes field. You must specify one field or the other, but not both.\nFor common key lengths (128-bit and 256-bit symmetric keys), we recommend that\nyou use KeySpec. To perform this operation on a CMK in a different AWS account,\nspecify the key ARN or alias ARN in the value of the KeyId parameter.\n\nThis operation returns a plaintext copy of the data key in the Plaintext field\nof the response, and an encrypted copy of the data key in the CiphertextBlob \nfield. The data key is encrypted under the CMK specified in the KeyId field of\nthe request. \n\nWe recommend that you use the following pattern to encrypt data locally in your\napplication:\n\n 1.  Use this operation (GenerateDataKey) to get a data encryption key.\n    \n    \n 2.  Use the plaintext data encryption key (returned in the Plaintext field of\n    the response) to encrypt data locally, then erase the plaintext data key\n    from memory.\n    \n    \n 3.  Store the encrypted data key (returned in the CiphertextBlob field of the\n    response) alongside the locally encrypted data.\n    \n    \n\nTo decrypt data locally:\n\n 1.  Use the Decrypt operation to decrypt the encrypted data key into a plaintext\n    copy of the data key.\n    \n    \n 2.  Use the plaintext data key to decrypt data locally, then erase the\n    plaintext data key from memory.\n    \n    \n\nTo return only an encrypted copy of the data key, use \nGenerateDataKeyWithoutPlaintext. To return a random byte string that is\ncryptographically secure, use GenerateRandom.\n\nIf you use the optional EncryptionContext field, you must store at least enough\ninformation to be able to reconstruct the full encryption context when you later\nsend the ciphertext to the Decrypt operation. It is a good practice to choose an\nencryption context that you can reconstruct on the fly to better secure the\nciphertext. For more information, see Encryption Context\n[http://docs.aws.amazon.com/kms/latest/developerguide/encryption-context.html] \nin the AWS Key Management Service Developer Guide.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GenerateDataKey.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GenerateDataKeyWithoutPlaintext": {
            "main": "./lib/actions/GenerateDataKeyWithoutPlaintext.js",
            "title": "GenerateDataKeyWithoutPlaintext",
            "description": "Returns a data encryption key encrypted under a customer master key (CMK). This\noperation is identical to GenerateDataKey but returns only the encrypted copy of\nthe data key. \n\nTo perform this operation on a CMK in a different AWS account, specify the key\nARN or alias ARN in the value of the KeyId parameter.\n\nThis operation is useful in a system that has multiple components with different\ndegrees of trust. For example, consider a system that stores encrypted data in\ncontainers. Each container stores the encrypted data and an encrypted copy of\nthe data key. One component of the system, called the control plane, creates new\ncontainers. When it creates a new container, it uses this operation (\nGenerateDataKeyWithoutPlaintext) to get an encrypted data key and then stores it\nin the container. Later, a different component of the system, called the data\nplane, puts encrypted data into the containers. To do this, it passes the\nencrypted data key to the Decrypt operation, then uses the returned plaintext\ndata key to encrypt data, and finally stores the encrypted data in the\ncontainer. In this system, the control plane never sees the plaintext data key.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GenerateDataKeyWithoutPlaintext.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GenerateRandom": {
            "main": "./lib/actions/GenerateRandom.js",
            "title": "GenerateRandom",
            "description": "Returns a random byte string that is cryptographically secure.\n\nBy default, the random byte string is generated in AWS KMS. To generate the byte\nstring in the AWS CloudHSM cluster that is associated with a custom key store\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html],\nspecify the custom key store ID.\n\nFor more information about entropy and random number generation, see the AWS Key\nManagement Service Cryptographic Details\n[https://d0.awsstatic.com/whitepapers/KMS-Cryptographic-Details.pdf] whitepaper.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GenerateRandom.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetKeyPolicy": {
            "main": "./lib/actions/GetKeyPolicy.js",
            "title": "GetKeyPolicy",
            "description": "Gets a key policy attached to the specified customer master key (CMK). You cannot perform this operation on a CMK in a different AWS account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetKeyPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetKeyRotationStatus": {
            "main": "./lib/actions/GetKeyRotationStatus.js",
            "title": "GetKeyRotationStatus",
            "description": "Gets a Boolean value that indicates whether automatic rotation of the key\nmaterial [http://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html] \nis enabled for the specified customer master key (CMK).\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.\n\n *  Disabled: The key rotation status does not change when you disable a CMK.\n   However, while the CMK is disabled, AWS KMS does not rotate the backing key.\n   \n   \n *  Pending deletion: While a CMK is pending deletion, its key rotation status\n   is false and AWS KMS does not rotate the backing key. If you cancel the\n   deletion, the original key rotation status is restored.\n   \n   \n\nTo perform this operation on a CMK in a different AWS account, specify the key\nARN in the value of the KeyId parameter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetKeyRotationStatus.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetParametersForImport": {
            "main": "./lib/actions/GetParametersForImport.js",
            "title": "GetParametersForImport",
            "description": "Returns the items you need in order to import key material into AWS KMS from\nyour existing key management infrastructure. For more information about\nimporting key material into AWS KMS, see Importing Key Material\n[http://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html] in\nthe AWS Key Management Service Developer Guide.\n\nYou must specify the key ID of the customer master key (CMK) into which you will\nimport key material. This CMK's Origin must be EXTERNAL. You must also specify\nthe wrapping algorithm and type of wrapping key (public key) that you will use\nto encrypt the key material. You cannot perform this operation on a CMK in a\ndifferent AWS account.\n\nThis operation returns a public key and an import token. Use the public key to\nencrypt the key material. Store the import token to send with a subsequent \nImportKeyMaterial request. The public key and import token from the same\nresponse must be used together. These items are valid for 24 hours. When they\nexpire, they cannot be used for a subsequent ImportKeyMaterial request. To get\nnew ones, send another GetParametersForImport request.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetParametersForImport.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ImportKeyMaterial": {
            "main": "./lib/actions/ImportKeyMaterial.js",
            "title": "ImportKeyMaterial",
            "description": "Imports key material into an existing AWS KMS customer master key (CMK) that was\ncreated without key material. You cannot perform this operation on a CMK in a\ndifferent AWS account. For more information about creating CMKs with no key\nmaterial and then importing key material, see Importing Key Material\n[http://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html] in\nthe AWS Key Management Service Developer Guide.\n\nBefore using this operation, call GetParametersForImport. Its response includes\na public key and an import token. Use the public key to encrypt the key\nmaterial. Then, submit the import token from the same GetParametersForImport \nresponse.\n\nWhen calling this operation, you must specify the following values:\n\n *  The key ID or key ARN of a CMK with no key material. Its Origin must be \n   EXTERNAL.\n   \n   To create a CMK with no key material, call CreateKey and set the value of its \n   Origin parameter to EXTERNAL. To get the Origin of a CMK, call DescribeKey.)\n   \n   \n *  The encrypted key material. To get the public key to encrypt the key\n   material, call GetParametersForImport.\n   \n   \n *  The import token that GetParametersForImport returned. This token and the\n   public key used to encrypt the key material must have come from the same\n   response.\n   \n   \n *  Whether the key material expires and if so, when. If you set an expiration\n   date, you can change it only by reimporting the same key material and\n   specifying a new expiration date. If the key material expires, AWS KMS\n   deletes the key material and the CMK becomes unusable. To use the CMK again,\n   you must reimport the same key material.\n   \n   \n\nWhen this operation is successful, the key state of the CMK changes from \nPendingImport to Enabled, and you can use the CMK. After you successfully import\nkey material into a CMK, you can reimport the same key material into that CMK,\nbut you cannot import different key material.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ImportKeyMaterial.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListAliases": {
            "main": "./lib/actions/ListAliases.js",
            "title": "ListAliases",
            "description": "Gets a list of all aliases in the caller's AWS account and region. You cannot\nlist aliases in other accounts. For more information about aliases, see \nCreateAlias.\n\nBy default, the ListAliases command returns all aliases in the account and\nregion. To get only the aliases that point to a particular customer master key\n(CMK), use the KeyId parameter.\n\nThe ListAliases response might include several aliases have no TargetKeyId \nfield. These are predefined aliases that AWS has created but has not yet\nassociated with a CMK. Aliases that AWS creates in your account, including\npredefined aliases, do not count against your AWS KMS aliases limit\n[http://docs.aws.amazon.com/kms/latest/developerguide/limits.html#aliases-limit]\n.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListAliases.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListGrants": {
            "main": "./lib/actions/ListGrants.js",
            "title": "ListGrants",
            "description": "Gets a list of all grants for the specified customer master key (CMK).\n\nTo perform this operation on a CMK in a different AWS account, specify the key\nARN in the value of the KeyId parameter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListGrants.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListKeyPolicies": {
            "main": "./lib/actions/ListKeyPolicies.js",
            "title": "ListKeyPolicies",
            "description": "Gets the names of the key policies that are attached to a customer master key (CMK). This operation is designed to get policy names that you can use in a <a>GetKeyPolicy</a> operation. However, the only valid policy name is <code>default</code>. You cannot perform this operation on a CMK in a different AWS account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListKeyPolicies.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListKeys": {
            "main": "./lib/actions/ListKeys.js",
            "title": "ListKeys",
            "description": "Gets a list of all customer master keys (CMKs) in the caller's AWS account and region.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListKeys.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListResourceTags": {
            "main": "./lib/actions/ListResourceTags.js",
            "title": "ListResourceTags",
            "description": "Returns a list of all tags for the specified customer master key (CMK).\n\nYou cannot perform this operation on a CMK in a different AWS account.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListResourceTags.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRetirableGrants": {
            "main": "./lib/actions/ListRetirableGrants.js",
            "title": "ListRetirableGrants",
            "description": "Returns a list of all grants for which the grant's RetiringPrincipal matches the\none specified.\n\nA typical use is to list all grants that you are able to retire. To retire a\ngrant, use RetireGrant.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRetirableGrants.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutKeyPolicy": {
            "main": "./lib/actions/PutKeyPolicy.js",
            "title": "PutKeyPolicy",
            "description": "Attaches a key policy to the specified customer master key (CMK). You cannot\nperform this operation on a CMK in a different AWS account.\n\nFor more information about key policies, see Key Policies\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html] in the \nAWS Key Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutKeyPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ReEncrypt": {
            "main": "./lib/actions/ReEncrypt.js",
            "title": "ReEncrypt",
            "description": "Encrypts data on the server side with a new customer master key (CMK) without\nexposing the plaintext of the data on the client side. The data is first\ndecrypted and then reencrypted. You can also use this operation to change the\nencryption context of a ciphertext. \n\nYou can reencrypt data using CMKs in different AWS accounts.\n\nUnlike other operations, ReEncrypt is authorized twice, once as ReEncryptFrom on\nthe source CMK and once as ReEncryptTo on the destination CMK. We recommend that\nyou include the \"kms:ReEncrypt*\" permission in your key policies\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html] to\npermit reencryption from or to the CMK. This permission is automatically\nincluded in the key policy when you create a CMK through the console, but you\nmust include it manually when you create a CMK programmatically or when you set\na key policy with the PutKeyPolicy operation.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ReEncrypt.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RetireGrant": {
            "main": "./lib/actions/RetireGrant.js",
            "title": "RetireGrant",
            "description": "Retires a grant. To clean up, you can retire a grant when you're done using it.\nYou should revoke a grant when you intend to actively deny operations that\ndepend on it. The following are permitted to call this API:\n\n *  The AWS account (root user) under which the grant was created\n   \n   \n *  The RetiringPrincipal, if present in the grant\n   \n   \n *  The GranteePrincipal, if RetireGrant is an operation specified in the grant\n   \n   \n\nYou must identify the grant to retire by its grant token or by a combination of\nthe grant ID and the Amazon Resource Name (ARN) of the customer master key\n(CMK). A grant token is a unique variable-length base64-encoded string. A grant\nID is a 64 character unique identifier of a grant. The CreateGrant operation\nreturns both.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RetireGrant.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RevokeGrant": {
            "main": "./lib/actions/RevokeGrant.js",
            "title": "RevokeGrant",
            "description": "Revokes the specified grant for the specified customer master key (CMK). You can\nrevoke a grant to actively deny operations that depend on it.\n\nTo perform this operation on a CMK in a different AWS account, specify the key\nARN in the value of the KeyId parameter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RevokeGrant.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ScheduleKeyDeletion": {
            "main": "./lib/actions/ScheduleKeyDeletion.js",
            "title": "ScheduleKeyDeletion",
            "description": "Schedules the deletion of a customer master key (CMK). You may provide a waiting\nperiod, specified in days, before deletion occurs. If you do not provide a\nwaiting period, the default period of 30 days is used. When this operation is\nsuccessful, the key state of the CMK changes to PendingDeletion. Before the\nwaiting period ends, you can use CancelKeyDeletion to cancel the deletion of the\nCMK. After the waiting period ends, AWS KMS deletes the CMK and all AWS KMS data\nassociated with it, including all aliases that refer to it.\n\nDeleting a CMK is a destructive and potentially dangerous operation. When a CMK\nis deleted, all data that was encrypted under the CMK is unrecoverable. To\nprevent the use of a CMK without deleting it, use DisableKey.\n\nIf you schedule deletion of a CMK from a custom key store\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-overview.html],\nwhen the waiting period expires, ScheduleKeyDeletion deletes the CMK from AWS\nKMS. Then AWS KMS makes a best effort to delete the key material from the\nassociated AWS CloudHSM cluster. However, you might need to manually delete the\norphaned key material\n[http://docs.aws.amazon.com/kms/latest/developerguide/fix-keystore.html#fix-keystore-orphaned-key] \nfrom the cluster and its backups.\n\nYou cannot perform this operation on a CMK in a different AWS account.\n\nFor more information about scheduling a CMK for deletion, see Deleting Customer\nMaster Keys\n[http://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html] in the \nAWS Key Management Service Developer Guide.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ScheduleKeyDeletion.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagResource": {
            "main": "./lib/actions/TagResource.js",
            "title": "TagResource",
            "description": "Adds or edits tags for a customer master key (CMK). You cannot perform this\noperation on a CMK in a different AWS account.\n\nEach tag consists of a tag key and a tag value. Tag keys and tag values are both\nrequired, but tag values can be empty (null) strings.\n\nYou can only use a tag key once for each CMK. If you use the tag key again, AWS\nKMS replaces the current tag value with the specified value.\n\nFor information about the rules that apply to tag keys and tag values, see \nUser-Defined Tag Restrictions\n[http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html] \nin the AWS Billing and Cost Management User Guide.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagResource": {
            "main": "./lib/actions/UntagResource.js",
            "title": "UntagResource",
            "description": "Removes the specified tags from the specified customer master key (CMK). You\ncannot perform this operation on a CMK in a different AWS account.\n\nTo remove a tag, specify the tag key. To change the tag value of an existing tag\nkey, use TagResource.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateAlias": {
            "main": "./lib/actions/UpdateAlias.js",
            "title": "UpdateAlias",
            "description": "Associates an existing alias with a different customer master key (CMK). Each\nCMK can have multiple aliases, but the aliases must be unique within the account\nand region. You cannot perform this operation on an alias in a different AWS\naccount.\n\nThis operation works only on existing aliases. To change the alias of a CMK to a\nnew value, use CreateAlias to create a new alias and DeleteAlias to delete the\nold alias.\n\nBecause an alias is not a property of a CMK, you can create, update, and delete\nthe aliases of a CMK without affecting the CMK. Also, aliases do not appear in\nthe response from the DescribeKey operation. To get the aliases of all CMKs in\nthe account, use the ListAliases operation. \n\nAn alias name can contain only alphanumeric characters, forward slashes (/),\nunderscores (_), and dashes (-). An alias must start with the word alias \nfollowed by a forward slash (alias/). The alias name can contain only\nalphanumeric characters, forward slashes (/), underscores (_), and dashes (-).\nAlias names cannot begin with aws; that alias name prefix is reserved by Amazon\nWeb Services (AWS).\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateAlias.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateCustomKeyStore": {
            "main": "./lib/actions/UpdateCustomKeyStore.js",
            "title": "UpdateCustomKeyStore",
            "description": "Changes the properties of a custom key store. Use the CustomKeyStoreId parameter\nto identify the custom key store you want to edit. Use the remaining parameters\nto change the properties of the custom key store.\n\nYou can only update a custom key store that is disconnected. To disconnect the\ncustom key store, use DisconnectCustomKeyStore. To reconnect the custom key\nstore after the update completes, use ConnectCustomKeyStore. To find the\nconnection state of a custom key store, use the DescribeCustomKeyStores \noperation.\n\nUse the NewCustomKeyStoreName parameter to change the friendly name of the\ncustom key store to the value that you specify.\n\nUse the KeyStorePassword parameter tell AWS KMS the current password of the \nkmsuser crypto user (CU)\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser] \nin the associated AWS CloudHSM cluster. You can use this parameter to fix\nconnection failures that occur when AWS KMS cannot log into the associated\ncluster because the kmsuser password has changed. This value does not change the\npassword in the AWS CloudHSM cluster.\n\nUse the CloudHsmClusterId parameter to associate the custom key store with a\nrelated AWS CloudHSM cluster, that is, a cluster that shares a backup history\nwith the original cluster. You can use this parameter to repair a custom key\nstore if its AWS CloudHSM cluster becomes corrupted or is deleted, or when you\nneed to create or restore a cluster from a backup.\n\nThe cluster ID must identify a AWS CloudHSM cluster with the following\nrequirements.\n\n *  The cluster must be active and be in the same AWS account and Region as the\n   custom key store.\n   \n   \n *  The cluster must have the same cluster certificate as the original cluster.\n   You cannot use this parameter to associate the custom key store with an\n   unrelated cluster. To view the cluster certificate, use the AWS CloudHSM \n   DescribeClusters\n   [http://docs.aws.amazon.com/cloudhsm/latest/APIReference/API_DescribeClusters.html] \n   operation. Clusters that share a backup history have the same cluster\n   certificate.\n   \n   \n *  The cluster must be configured with subnets in at least two different\n   Availability Zones in the Region. Because AWS CloudHSM is not supported in\n   all Availability Zones, we recommend that the cluster have subnets in all\n   Availability Zones in the Region.\n   \n   \n *  The cluster must contain at least two active HSMs, each in a different\n   Availability Zone.\n   \n   \n\nIf the operation succeeds, it returns a JSON object with no properties.\n\nThis operation is part of the Custom Key Store feature\n[http://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html] \nfeature in AWS KMS, which combines the convenience and extensive integration of\nAWS KMS with the isolation and control of a single-tenant key store.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateCustomKeyStore.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateKeyDescription": {
            "main": "./lib/actions/UpdateKeyDescription.js",
            "title": "UpdateKeyDescription",
            "description": "Updates the description of a customer master key (CMK). To see the decription of\na CMK, use DescribeKey. \n\nYou cannot perform this operation on a CMK in a different AWS account.\n\nThe result of this operation varies with the key state of the CMK. For details,\nsee How Key State Affects Use of a Customer Master Key\n[http://docs.aws.amazon.com/kms/latest/developerguide/key-state.html] in the AWS\nKey Management Service Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateKeyDescription.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}